# Each step starts in the checked-out source directory,
# environment variables aren't persisted across steps.
#
# Required env vars:
# - CI_OS
# - IOS_DEPLOYMENT_TARGET

steps:

- checkout: self
  submodules: false
  fetchDepth: 50

# Download x86_64 and arm64 artifacts
- task: DownloadPipelineArtifact@2
  inputs:
    artifactName: $(CI_OS)-x86_64
    targetPath: artifacts
  displayName: Download x86_64 artifact
- task: DownloadPipelineArtifact@2
  inputs:
    artifactName: $(CI_OS)-arm64
    targetPath: artifacts
  displayName: Download arm64 artifact

# Extract & merge
- script: |
    set -ex

    mkdir ldc2-{x86_64,arm64}
    tar -xf artifacts/ldc2-*-x86_64.tar.xz --strip 1 -C ldc2-x86_64
    tar -xf artifacts/ldc2-*-arm64.tar.xz  --strip 1 -C ldc2-arm64

    cp -R ldc2-x86_64 ldc2-universal
    cd ldc2-universal

    # rename/copy lib dirs
    mv lib                            lib-x86_64
    cp -R ../ldc2-arm64/lib           lib-arm64
    cp -R ../ldc2-arm64/lib-ios-arm64 .

    # merge executables to universal ones
    for exe in bin/*; do
      rm $exe
      lipo -create -output $exe ../ldc2-x86_64/$exe ../ldc2-arm64/$exe
    done

    # ldc2.conf: replace the default section and add extra sections
    sections="
    default:
    {
        // default switches injected before all explicit command-line switches
        switches = [
            \"-defaultlib=phobos2-ldc,druntime-ldc\",
        ];
        // default switches appended after all explicit command-line switches
        post-switches = [
            \"-I%%ldcbinarypath%%/../import\",
        ];
        // default directories to be searched for libraries when linking
        lib-dirs = [];
        // default rpath when linking against the shared default libs
        rpath = \"\";
    };

    \"x86_64-apple-\":
    {
        switches = [
            \"-defaultlib=phobos2-ldc,druntime-ldc\",
            \"-Xcc=-target\",
            \"-Xcc=x86_64-apple-macos\",
        ];
        lib-dirs = [
            \"%%ldcbinarypath%%/../lib-x86_64\",
        ];
        rpath = \"%%ldcbinarypath%%/../lib-x86_64\";
    };

    \"arm64-apple-\":
    {
        switches = [
            \"-defaultlib=phobos2-ldc,druntime-ldc\",
            \"-Xcc=-target\",
            \"-Xcc=arm64-apple-macos\",
        ];
        lib-dirs = [
            \"%%ldcbinarypath%%/../lib-arm64\",
        ];
        rpath = \"%%ldcbinarypath%%/../lib-arm64\";
    };

    \"arm64-apple-ios\":
    {
        switches = [
            \"-defaultlib=phobos2-ldc,druntime-ldc\",
            \"-Xcc=-target\",
            \"-Xcc=arm64-apple-ios$IOS_DEPLOYMENT_TARGET\",
            \"-Xcc=-miphoneos-version-min=$IOS_DEPLOYMENT_TARGET\",
            \"-Xcc=-isysroot\",
            \"-Xcc=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk\",
        ];
        lib-dirs = [
            \"%%ldcbinarypath%%/../lib-ios-arm64\",
        ];
        rpath = \"%%ldcbinarypath%%/../lib-ios-arm64\";
    };"

    perl -0777 -pi -e "s|\\ndefault:\\n.+?\\n\\};|$sections|s" etc/ldc2.conf
    cat etc/ldc2.conf
    cd ..
  displayName: Extract & merge artifacts

# Smoke tests
- script: |
    set -ex
    echo 'void main() { import std.stdio; writefln("Hello world, %d bits", size_t.sizeof * 8); }' > hello.d
    for os in macos ios$IOS_DEPLOYMENT_TARGET; do
      for arch in x86_64 arm64; do
        triple="$arch-apple-$os"
        ldc2-universal/bin/ldc2 -mtriple="$triple" hello.d
        ldc2-universal/bin/ldc2 -mtriple="$triple" hello.d -link-defaultlib-shared
      done
    done
  displayName: Run x86_64/arm64 macOS/iOS cross-compilation smoke tests

# Pack & publish artifact
- script: |
    set -ex
    mkdir newArtifacts
    if [ "${BUILD_SOURCEBRANCH:0:10}" = "refs/tags/" ]; then
      artifactID=${BUILD_SOURCEBRANCH:11}
    else
      artifactID=${BUILD_SOURCEVERSION:0:8}
    fi
    artifactName=ldc2-$artifactID-$CI_OS-universal
    mv ldc2-universal $artifactName
    chmod -R go=rX $artifactName
    sudo chown -R root:wheel $artifactName
    tar -cJf newArtifacts/$artifactName.tar.xz --options='compression-level=9' $artifactName
  displayName: Pack
- publish: newArtifacts
  artifact: $(CI_OS)-universal
