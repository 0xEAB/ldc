# Cross-compiles the iOS default libraries, copies them to the install dir and
# extends ldc2.conf.
#
# Required env vars:
# - ARCH
# - IOS_DEPLOYMENT_TARGET
# - PARALLEL_JOBS

steps:
- script: |
    set -ex
    cd ..
    export PATH="$PWD/ninja:$PATH"
    triple="$ARCH-apple-ios$IOS_DEPLOYMENT_TARGET"
    if [[ "$ARCH" == "arm64" ]]; then
        sysroot="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk"
    else
        sysroot="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk"
    fi
    # use bootstrap-ldc, which is guaranteed to be native
    bootstrap-ldc/bin/ldc-build-runtime --ninja -j $PARALLEL_JOBS \
      --buildDir=build-libs-ios \
      --dFlags="-mtriple=$triple" \
      --ldcSrcDir=$BUILD_SOURCESDIRECTORY \
      CMAKE_SYSTEM_NAME=iOS \
      CMAKE_OSX_SYSROOT="$sysroot" \
      CMAKE_OSX_ARCHITECTURES=$ARCH \
      CMAKE_OSX_DEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET \
      BUILD_LTO_LIBS=ON
    mkdir installed/lib-ios-$ARCH
    cp -a build-libs-ios/lib/*.{a,dylib,o} installed/lib-ios-$ARCH
    section="
    \"$ARCH-apple-ios\":
    {
        switches = [
            \"-defaultlib=phobos2-ldc,druntime-ldc\",
            \"-Xcc=-target\",
            \"-Xcc=$triple\",
            \"-Xcc=-miphoneos-version-min=$IOS_DEPLOYMENT_TARGET\",
            \"-Xcc=-isysroot\",
            \"-Xcc=$sysroot\",
        ];
        lib-dirs = [
            \"%%ldcbinarypath%%/../lib-ios-$ARCH\",
        ];
        rpath = \"%%ldcbinarypath%%/../lib-ios-$ARCH\";
    };"
    echo "$section" >> installed/etc/ldc2.conf
    cat installed/etc/ldc2.conf
  displayName: 'Cross-compile iOS default libraries, copy to install dir and extend ldc2.conf'
