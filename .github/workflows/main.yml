name: Main
on: [push, pull_request]

env:
  CLANG_VERSION: 14.0.0
  LLVM_VERSION: 14.0.0

jobs:
  build-native:
    strategy:
      fail-fast: false
      matrix:
        include:

          - job_name: Linux multilib
            os: ubuntu-18.04
            arch: x86_64
            bootstrap_cmake_flags: -DBUILD_LTO_LIBS=ON
            # To improve portability of the generated binaries, link the C++ standard library statically.
            extra_cmake_flags: >
              -DMULTILIB=ON
              -DBUILD_LTO_LIBS=ON
              -DCMAKE_C_COMPILER=/home/runner/work/ldc/clang/bin/clang
              -DCMAKE_CXX_COMPILER=/home/runner/work/ldc/clang/bin/clang++
              -DCMAKE_EXE_LINKER_FLAGS=-static-libstdc++
              -DJITRT_EXTRA_LDFLAGS=-static-libstdc++
              -DD_COMPILER_FLAGS="-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto"
              -DEXTRA_CXXFLAGS=-flto=full

          - job_name: macOS x64
            os: macos-11
            arch: x86_64
            bootstrap_cmake_flags: >
              -DBUILD_LTO_LIBS=ON
              -DD_COMPILER_FLAGS=-gcc=/usr/bin/c++
            extra_cmake_flags: >
              -DBUILD_LTO_LIBS=ON
              -DD_COMPILER_FLAGS="-gcc=/usr/bin/c++ -O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto"
              -DEXTRA_CXXFLAGS=-flto=full

          - job_name: Windows x64
            os: windows-2019
            arch: x64
            bootstrap_cmake_flags: >
              -DBUILD_LTO_LIBS=ON
              -DCMAKE_C_COMPILER=clang-cl.exe
              -DCMAKE_CXX_COMPILER=clang-cl.exe
            extra_cmake_flags: >
              -DBUILD_LTO_LIBS=ON
              -DCMAKE_C_COMPILER=clang-cl.exe
              -DCMAKE_CXX_COMPILER=clang-cl.exe
              "-DD_COMPILER_FLAGS=-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto"
              -DEXTRA_CXXFLAGS=-flto=full

          - job_name: Windows x86
            os: windows-2019
            arch: x86
            bootstrap_cmake_flags: >
              -DBUILD_LTO_LIBS=ON
              -DCMAKE_C_COMPILER=clang-cl.exe
              -DCMAKE_CXX_COMPILER=clang-cl.exe
            # Undefined symbol errors with FullLTO; ThinLTO works.
            extra_cmake_flags: >
              -DBUILD_LTO_LIBS=ON
              -DCMAKE_C_COMPILER=clang-cl.exe
              -DCMAKE_CXX_COMPILER=clang-cl.exe
              "-DD_COMPILER_FLAGS=-O -flto=thin -defaultlib=phobos2-ldc-lto,druntime-ldc-lto"
              -DEXTRA_CXXFLAGS=-flto=thin

    name: ${{ matrix.job_name }}
    runs-on: ${{ matrix.os }}
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.12
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 50
      - name: Setup
        uses: ./.github/actions/1-setup
        with:
          clang_version: ${{ env.CLANG_VERSION }}
          llvm_version: ${{ env.LLVM_VERSION }}
          arch: ${{ matrix.arch }}
      - name: Build bootstrap LDC
        uses: ./.github/actions/2-build-bootstrap
        with:
          cmake_flags: ${{ matrix.bootstrap_cmake_flags }}
          arch: ${{ matrix.arch }}
      - name: Build LDC & LDC D unittests & defaultlib unittest runners
        uses: ./.github/actions/3-build-native
        with:
          cmake_flags: ${{ matrix.extra_cmake_flags }}
          arch: ${{ matrix.arch }}

      - name: Run LDC D unittests
        if: success() || failure()
        uses: ./.github/actions/4a-test-ldc2
      - name: Run LIT testsuite
        if: success() || failure()
        uses: ./.github/actions/4b-test-lit
        with:
          arch: ${{ matrix.arch }}
      - name: Run DMD testsuite
        if: success() || failure()
        uses: ./.github/actions/4c-test-dmd
        with:
          arch: ${{ matrix.arch }}
      - name: Run defaultlib unittests & druntime integration tests
        if: success() || failure()
        uses: ./.github/actions/4d-test-libs
        with:
          arch: ${{ matrix.arch }}

      - name: Install LDC & make portable
        uses: ./.github/actions/5-install
        with:
          arch: ${{ matrix.arch }}


  build-cross:
    name: Linux cross
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 50
      - name: Setup
        uses: ./.github/actions/1-setup
        with:
          clang_version: ${{ env.CLANG_VERSION }}
          llvm_version: ${{ env.LLVM_VERSION }}
          arch: x86_64
