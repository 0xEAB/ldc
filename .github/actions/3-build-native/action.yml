name: Build LDC & LDC D unittests & defaultlib unittest runners
inputs:
  cmake_flags:
    required: false
    default: ''
  arch:
    required: false # Windows only
runs:
  using: composite
  steps:

    - name: 'Posix: Build mimalloc'
      if: runner.os != 'Windows'
      uses: ./.github/actions/helper-mimalloc

    - name: 'Posix: Build LDC & LDC D unittests & defaultlib unittest runners'
      if: runner.os != 'Windows'
      shell: bash
      run: |
        set -eux
        cd ..
        installDir="$PWD/install"
        mkdir build
        cd build
        cmake -G Ninja ../ldc \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ROOT_DIR="$PWD/../llvm" \
          -DD_COMPILER="$PWD/../bootstrap-ldc/bin/ldmd2" \
          -DCMAKE_INSTALL_PREFIX="$installDir" \
          -DINCLUDE_INSTALL_DIR="$installDir/import" \
          -DLDC_LINK_MANUALLY=OFF \
          -DALTERNATIVE_MALLOC_O="$PWD/../build-mimalloc/CMakeFiles/mimalloc-obj.dir/src/static.c.o" \
          ${{ inputs.cmake_flags }}
        ninja all ldc2-unittest all-test-runners
    # Windows: invoke CMake & ninja in MSVC env
    - name: 'Windows: Build LDC & LDC D unittests & defaultlib unittest runners'
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        call "%LDC_VSDIR%\Common7\Tools\VsDevCmd.bat" -arch=${{ inputs.arch }} || exit /b
        echo on
        cd .. || exit /b
        set "installDir=%CD%\install"
        mkdir build || exit /b
        cd build || exit /b
        cmake -G Ninja ../ldc ^
          -DCMAKE_BUILD_TYPE=Release ^
          "-DLLVM_ROOT_DIR=%CD%\..\llvm" ^
          "-DD_COMPILER=%CD%\..\bootstrap-ldc\bin\ldmd2" ^
          "-DCMAKE_INSTALL_PREFIX=%installDir%" ^
          "-DINCLUDE_INSTALL_DIR=%installDir%\import" ^
          -DCMAKE_C_COMPILER=clang-cl ^
          -DCMAKE_CXX_COMPILER=clang-cl ^
          ${{ inputs.cmake_flags }}
        if %errorlevel% neq 0 exit /b %errorlevel%
        ninja all ldc2-unittest all-test-runners || exit /b

    - run: ../build/bin/ldc2 --version
      shell: bash
