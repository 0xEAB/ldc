language: c

compiler:
  - gcc

runtime:
  nodePool: shippable_shared_aarch64

env:
  - LLVM_VERSION=6.0.1-3
    EXTRA_CMAKE_FLAGS="-DBUILD_LTO_LIBS=ON -DCMAKE_EXE_LINKER_FLAGS=-static-libstdc++ -DLDC_INSTALL_LTOPLUGIN=ON -DLDC_INSTALL_LLVM_RUNTIME_LIBS=ON"

build:
  ci:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get -q update
    # libconfig-dev needed for ltsmaster only
    - |
      apt-get -yq install \
        git-core cmake ninja-build \
        libconfig-dev zlib1g-dev \
        libcurl3 \
        curl gdb p7zip-full python-pip tzdata unzip zip
    - pip install --user lit
    - update-alternatives --install /usr/bin/ld ld /usr/bin/ld.gold 99
    # Install LDC-flavoured LLVM
    - |
      assertsSuffix=""
      if [ "$IS_GIT_TAG" = "false" ]; then
        echo "Using LLVM with enabled assertions"
        assertsSuffix="-withAsserts"
      fi
      curl -L -o llvm.tar.xz https://github.com/ldc-developers/llvm/releases/download/ldc-v$LLVM_VERSION/llvm-$LLVM_VERSION-linux-aarch64$assertsSuffix.tar.xz
      mkdir llvm && tar -xf llvm.tar.xz --strip 1 -C llvm
      rm llvm.tar.xz
    # Build ltsmaster for bootstrapping
    - git checkout -b _backup
    - git checkout ltsmaster
    - git submodule update
    - mkdir build-ltsmaster
    - cd build-ltsmaster
    - |
      cmake -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DLLVM_ROOT_DIR=$PWD/../llvm \
        -DCMAKE_INSTALL_PREFIX=$PWD/../ldc-ltsmaster \
        ..
    - ninja install
    - cd ..
    - ldc-ltsmaster/bin/ldc2 --version
    # Build actual version, for another bootstrapping step
    - git checkout _backup
    - git submodule update
    - mkdir build-bootstrap
    - cd build-bootstrap
    - |
      cmake -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DLLVM_ROOT_DIR=$PWD/../llvm \
        -DCMAKE_INSTALL_PREFIX=$PWD/../ldc-bootstrap \
        -DD_COMPILER=$PWD/../ldc-ltsmaster/bin/ldmd2 \
        ..
    - ninja install
    - cd ..
    - ldc-bootstrap/bin/ldc2 --version
    # Build with itself
    - export LDC_INSTALL_DIR=$PWD/ldc2-aarch64
    - mkdir build
    - cd build
    - |
      cmake -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DLLVM_ROOT_DIR=$PWD/../llvm \
        -DCMAKE_INSTALL_PREFIX=$LDC_INSTALL_DIR \
        -DINCLUDE_INSTALL_DIR=$LDC_INSTALL_DIR/import \
        -DD_COMPILER=$PWD/../ldc-bootstrap/bin/ldmd2 \
        $EXTRA_CMAKE_FLAGS \
        ..
    - ninja
    - bin/ldc2 --version
    # Build druntime/Phobos unittest runners
    - ninja -j16 all-test-runners
    # Build and run LDC D unittests
    - ctest --output-on-failure -R ldc2-unittest
    # Run LIT testsuite
    - ctest -V -R lit-tests || true
    # Run DMD testsuite (non-debug only for now)
    - DMD_TESTSUITE_MAKE_ARGS='-j16 -k' ctest -V -R dmd-testsuite -E "-debug$" || true
    # Run druntime/Phobos unittests (non-debug only for now)
    - ctest -j16 --output-on-failure -E "dmd-testsuite|ldc2-unittest|lit-tests|-debug(-shared)?$" || true
    # Install LDC
    - |
      ninja install
      cd ..
      perl -pi -e s?$LDC_INSTALL_DIR/?%%ldcbinarypath%%/../?g $LDC_INSTALL_DIR/etc/ldc2.conf
      cp project/LICENSE $LDC_INSTALL_DIR
      git clone https://github.com/ldc-developers/ldc-scripts.git
      cp ldc-scripts/ldc2-packaging/pkgfiles/README $LDC_INSTALL_DIR
      # Now rename the installation dir to test portability.
      NEW_LDC_INSTALL_DIR=$PWD/ldc2-install
      mv $LDC_INSTALL_DIR $NEW_LDC_INSTALL_DIR
      export LDC_INSTALL_DIR=$NEW_LDC_INSTALL_DIR

integrations:
  notifications:
    - integrationName: email
      type: email
      on_success: never
      on_failure: never
      on_cancel: never
      on_pull_request: never
